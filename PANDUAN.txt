# buat repository di github

# clone link repository yang sudah dibuat dengan perintah:
git clone https://github.com/aguspriyatin80/nodejs-crud-basic.git

# buat file package.json dengan perintah:
npm init -y // -y akan mengatur  konfigurasinya secara default

# install beberapa dependency berikut, dengan perintah: 
npm install cors dotenv express mongoose mongoose-unique-validator nodemon

# buat file .env kodenya sbb:
PORT=3000
MONGO_URI="mongodb://localhost:27017/db_book"

# buat file .gitignore yang berisi:
node_modules/
.env

# buat file app.js di root, kodenya sbb:
const express = require('express');
const app = express();
const dotenv = require('dotenv');
dotenv.config();

const cors = require('cors');
const mongoose = require('mongoose');

// parser
app.use(express.json());
app.use(express.urlencoded({extended:false}))

//cors
app.use(cors());

// db config
const mongoURI = process.env.MONGO_URI;
mongoose.Promise = global.Promise;
const options = {
    useNewUrlParser: true,
    useUnifiedTopology: true,
    useFindAndModify: false,
    };
mongoose.connect(mongoURI, options);

const db = mongoose.connection;
db.on("error", console.error.bind(console,"Connection Error"));
db.once("open", () => console.log("Connected to mongodb!"));

// routes
// const booksRoute = require("./routes/book");
// const errorHandler = require("./middlewares/errorHandler");

// app.use("/books", booksRoute);
// app.use(errorHandler);

// server
const PORT = process.env.PORT || 3000;
app.listen(PORT, () => console.log(`Listening to ${PORT}`));

# buat folder models dan file book.js di dalamnya, kodenya sbb:
const mongoose = require('mongoose');
const { Schema } = mongoose;

const bookSchema = new Schema({
    title: {
        type: String,
        required: true,
        lowercase: true,
        trim: true
    },
    author: {
        type: String,
        required: true,
        lowercase: true,
        trim: true
    },
    publisher: {
        type: String,
        required: true,
        lowercase: true,
        trim: true
    },
    publication_year: {
        type: Number,
        required: true,
    },
    cost_price: {
        type: Number,
        required: true,
    },
    sale_price: {
        type: Number,
        required: true,
    },
    quantity: {
        type: Number,
        required: true,
    }

}, { timestamps: true, versionKey: false });

const books = mongoose.model("Book", bookSchema);
exports.Book = books;

# buat folder controllers berikut file book.js di dalamnya, kodenya sbb:
const { Book } = require("../models/book");
exports.Create = async(req, res, next) => {
    try {
        let books = await Book.create(req.body);

        res.status(201).json({
            success: true,
            message: "Successfully created data!",
            books,
        });
    } catch (err) {
        next(err);
    }
};

# buat folder routes berikut file book.js di dalamnya, kodenya sbb:
const express = require("express");
const router = express.Router();

const booksController = require("../controllers/bookController");

router.post("/", bookController.Create);

module.exports = router;

# tambahkan kode berikut pada file app.js:
// routes
const booksRoute = require("./routes/book");
app.use("/books", booksRoute);

# sehingga kode app.js menjadi sbb:
const express = require('express');
const app = express();
const dotenv = require('dotenv');
dotenv.config();

const cors = require('cors');
const mongoose = require('mongoose');

// parser
app.use(express.json());
app.use(express.urlencoded({extended:false}))

//cors
app.use(cors());

// db config
const mongoURI = process.env.MONGO_URI;
mongoose.Promise = global.Promise;
const options = {
    useNewUrlParser: true,
    useUnifiedTopology: true,
    useFindAndModify: false,
    };
mongoose.connect(mongoURI, options);

const db = mongoose.connection;
db.on("error", console.error.bind(console,"Connection Error"));
db.once("open", () => console.log("Connected to mongodb!"));

// routes
const booksRoute = require("./routes/book");
app.use("/books", booksRoute);

// server
const PORT = process.env.PORT || 3000;
app.listen(PORT, () => console.log(`Listening to ${PORT}`));

# sekarang jalankan server dengan ketik di terminal 'npm run start' (tanpa kutip) dan test dengan POSTMAN dengan url : localhost:3000/book/add dengan method POST, jika benar akan menghasilkan response sbb:
{
    "success": true,
    "message": "Successfully created data!",
    "data": {
        "_id": "60f98e11426b9622dc0eb82a",
        "title": "struktur data",
        "author": "agus",
        "publisher": "gramedia",
        "publication_year": 2020,
        "cost_price": 15000,
        "sale_price": 20000,
        "quantity": 10,
        "createdAt": "2021-07-22T15:26:09.553Z",
        "updatedAt": "2021-07-22T15:26:09.553Z"
    }
}

# untuk menampilkan datanya,  maka tambahkan kode berikut pada bookController.js:
exports.Read = async(req, res, next) => {
    try {
        let books = await Book.find();
        res.status(200).json({
            success: true,
            message: "Successfully retrieve the data",
            books
        })
    } catch (err) {
        next(err);
    }
}

# sehingga bookController.js menjadi sbb:
const { Book } = require("../models/Book");
exports.Create = async(req, res, next) => {
    try {
        let book = await Book.create(req.body);
        res.status(201).json({
            success: true,
            message: "Successfully created data!",
            book,
        });
    } catch (err) {
        next(err);
    }
};

exports.Read = async(req, res, next) => {
    try {
        let book = await Book.find();
        res.status(200).json({
            success: true,
            message: "Successfully retrieve the data",
            book
        })
    } catch (err) {
        next(err);
    }
}

# tambahkan kode berikut pada routes book.js:
router.get("/", bookController.Read);

# coba test dengan POSTMAN menggunakan url localhost:3000/book dengan method GET, jika benar akan menghasilkan data response sbb:
{
    "success": true,
    "message": "Successfully retrieve the data",
    "data": [
        {
            "_id": "60f98e11426b9622dc0eb82a",
            "title": "struktur data",
            "author": "agus",
            "publisher": "gramedia",
            "publication_year": 2020,
            "cost_price": 15000,
            "sale_price": 20000,
            "quantity": 10,
            "createdAt": "2021-07-22T15:26:09.553Z",
            "updatedAt": "2021-07-22T15:26:09.553Z"
        }
    ]
}

# untuk mengedit data buku, tambahkan kode berikut pada file bookController.js:
exports.Update = async(req, res, next) => {
    try {
        const { id } = req.params;
        if (!id) return next({ message: "Missing ID parameters" });
        const book = await Book.findByIdAndUpdate(id, { $set: req.body }, { new: true });
        res.status(200).json({
            success: true,
            message: "Successfully updated data",
            book
        })
    } catch (err) {
        next(err);
    }
}

# tambahkan kode ini pada route book.js:
router.put("/:id", booksController.Update);

# tambahkan kode untuk menghapus data, sbb:
exports.Delete = async(req, res, next) => {
    try {
        const { id } = req.params;

        if (!id) return next({ message: "Missing ID Params" });

        await Book.findByIdAndRemove(id, (error, doc, result) => {
            if (error) throw "Failed to delete";
            if (!doc)
                return res.status(400).json({ success: false, err: "Data not found!" });
            res.status(200).json({
                success: true,
                message: "Successfully deleted data!",
                data: doc,
            });
        });
    } catch (err) {
        next(err);
    }
};

# tambahkan baris kode pada route book.js:
router.delete("/:id", booksController.Delete;
